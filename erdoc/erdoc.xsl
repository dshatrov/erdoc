<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE xsl:stylesheet [<!ENTITY nbsp "&#160;">]>

<xsl:stylesheet version="1.0"
		xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:exslt="http://exslt.org/common"
		extension-element-prefixes="exslt">
<xsl:output method="xml"
	    version="1.0"
	    encoding="UTF-8"
	    doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN"
	    doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"/>

<xsl:variable name="erdoc_footer">
	<div class="footer">Generated by erDoc 0.6 </div>
</xsl:variable>

<xsl:template name="class_list">
	<xsl:param name="first_namespace">0</xsl:param>
	<xsl:param name="depth">0</xsl:param>

	<xsl:if test="has_class">
		<xsl:for-each select="class">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_class">
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="class_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
		<xsl:variable name="has_classes">
			<xsl:choose>
				<xsl:when test="class">1</xsl:when>
				<xsl:otherwise>0</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="((struct | union | enum | namespace) [has_class]) [position() = 1]">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_namespace">
				<xsl:with-param name="first">
					<xsl:choose>
						<xsl:when test="$first_namespace = 0">
							<xsl:choose>
								<xsl:when test="$has_classes = 1">1</xsl:when>
								<xsl:otherwise>0</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:otherwise>1</xsl:otherwise>
					</xsl:choose>
				</xsl:with-param>
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="class_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
		<xsl:for-each select="((struct | union | enum | namespace) [has_class]) [position() > 1]">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_namespace">
				<xsl:with-param name="first">1</xsl:with-param>
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="class_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:if>
</xsl:template>

<xsl:template name="struct_list">
	<xsl:param name="first_namespace">0</xsl:param>
	<xsl:param name="depth">0</xsl:param>

	<xsl:if test="has_struct">
		<xsl:for-each select="struct">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_class">
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="struct_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
		<xsl:variable name="has_structs">
			<xsl:choose>
				<xsl:when test="struct">1</xsl:when>
				<xsl:otherwise>0</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="((class | union | enum | namespace) [has_struct]) [position() = 1]">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_namespace">
				<xsl:with-param name="first">
					<xsl:choose>
						<xsl:when test="$first_namespace = 0">
							<xsl:choose>
								<xsl:when test="$has_structs = 1">1</xsl:when>
								<xsl:otherwise>0</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:otherwise>1</xsl:otherwise>
					</xsl:choose>
				</xsl:with-param>
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="struct_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
		<xsl:for-each select="((class | union | enum | namespace) [has_struct]) [position() > 1]">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_namespace">
				<xsl:with-param name="first">1</xsl:with-param>
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="struct_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:if>
</xsl:template>

<xsl:template name="union_list">
	<xsl:param name="first_namespace">0</xsl:param>
	<xsl:param name="depth">0</xsl:param>

	<xsl:if test="has_union">
		<xsl:for-each select="union">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_class">
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="union_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
		<xsl:variable name="has_unions">
			<xsl:choose>
				<xsl:when test="union">1</xsl:when>
				<xsl:otherwise>0</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="((class | struct | enum | namespace) [has_union]) [position() = 1]">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_namespace">
				<xsl:with-param name="first">
					<xsl:choose>
						<xsl:when test="$first_namespace = 0">
							<xsl:choose>
								<xsl:when test="$has_unions = 1">1</xsl:when>
								<xsl:otherwise>0</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:otherwise>1</xsl:otherwise>
					</xsl:choose>
				</xsl:with-param>
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="union_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
		<xsl:for-each select="((class | struct | enum | namespace) [has_union]) [position() > 1]">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_namespace">
				<xsl:with-param name="first">1</xsl:with-param>
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="union_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:if>
</xsl:template>

<xsl:template name="enum_list">
	<xsl:param name="first_namespace">0</xsl:param>
	<xsl:param name="depth">0</xsl:param>

	<xsl:if test="has_enum">
		<xsl:for-each select="enum">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_class">
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="enum_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
		<xsl:variable name="has_enums">
			<xsl:choose>
				<xsl:when test="enum">1</xsl:when>
				<xsl:otherwise>0</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="((class | struct | union | namespace) [has_enum]) [position() = 1]">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_namespace">
				<xsl:with-param name="first">
					<xsl:choose>
						<xsl:when test="$first_namespace = 0">
							<xsl:choose>
								<xsl:when test="$has_enums = 1">1</xsl:when>
								<xsl:otherwise>0</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:otherwise>1</xsl:otherwise>
					</xsl:choose>
				</xsl:with-param>
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="enum_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
		<xsl:for-each select="((class | struct | union | namespace) [has_enum]) [position() > 1]">
			<xsl:sort select="name"/>
			<xsl:call-template name="class_list_namespace">
				<xsl:with-param name="first">1</xsl:with-param>
				<xsl:with-param name="depth" select="$depth"/>
			</xsl:call-template>
			<xsl:call-template name="enum_list">
				<xsl:with-param name="depth" select="$depth + 1"/>
			</xsl:call-template>
		</xsl:for-each>
	</xsl:if>
</xsl:template>

<xsl:template name="class_list_class">
	<xsl:param name="depth">0</xsl:param>

	<tr>
		<td class="class_name" style="width: 1px">
<!-- DEPTH
			<xsl:variable name="depth">
				<xsl:value-of select="depth"/>
			</xsl:variable>
-->
			<div style="margin-left: {$depth}em">
				<a href="{filename}">
					<xsl:value-of select="name"/>
				</a>
				<xsl:if test="template">
					&lt;&gt;
				</xsl:if>
			</div>
		</td>
		<td class="class_desc">
			<xsl:apply-templates select="abstract"/>
		</td>
	</tr>
</xsl:template>

<xsl:template name="class_list_namespace_body">
	<xsl:param name="depth">0</xsl:param>
	<xsl:param name="class"/>

	<td colspan="2" class="namespace_name {$class}">
<!-- DEPTH
		<xsl:variable name="depth">
			<xsl:value-of select="depth"/>
		</xsl:variable>
-->
		<div style="padding-left: {$depth}em">
			<b><xsl:value-of select="name"/></b>
		</div>
	</td>
</xsl:template>

<xsl:template name="class_list_namespace">
	<xsl:param name="first">0</xsl:param>
	<xsl:param name="depth">0</xsl:param>

	<tr>
		<xsl:choose>
			<xsl:when test="$first = 1">
				<xsl:call-template name="class_list_namespace_body">
					<xsl:with-param name="depth" select="$depth"/>
					<xsl:with-param name="class">namespace_first</xsl:with-param>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="class_list_namespace_body">
					<xsl:with-param name="depth" select="$depth"/>
					<xsl:with-param name="class"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</tr>
</xsl:template>

<xsl:template name="global_brief">
	<xsl:param name="first">0</xsl:param>

	<xsl:variable name="class">
<!-- TODO Unused? -->
		<xsl:if test="$first != 1">method_brief_more</xsl:if>
	</xsl:variable>

	<tr>
		<td class="global_brief {$class}">
			<xsl:variable name="depth">
				<xsl:value-of select="depth"/>
			</xsl:variable>
			<div style="padding-left: {$depth}em">
				<a href="{filename}">
					<xsl:value-of select="title"/>
				</a>
			</div>
		</td>
	</tr>

	<xsl:call-template name="generic_class"/>

	<xsl:for-each select="global">
		<xsl:call-template name="global_brief"/>
	</xsl:for-each>
</xsl:template>

<xsl:template name="category_description">
	<xsl:choose>
		<xsl:when test="not(desc) and not(abstract)">
			<div style="height: 1.5em"/>
		</xsl:when>
		<xsl:otherwise>
			<div style="height: 0.75em"/>
			<p><xsl:apply-templates select="abstract"/></p>
			<xsl:apply-templates select="desc"/>
			<div style="height: 1.5em"/>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="category_frame">
	<xsl:variable name="classes_test">
		<xsl:call-template name="class_list"/>
	</xsl:variable>
	<xsl:variable name="structs_test">
		<xsl:call-template name="struct_list"/>
	</xsl:variable>
	<xsl:variable name="unions_test">
		<xsl:call-template name="union_list"/>
	</xsl:variable>
	<xsl:variable name="enums_test">
		<xsl:call-template name="enum_list"/>
	</xsl:variable>

	<div class="linkbar">
		<xsl:if test="/erdoc/root">
		    <div style="padding-left: 1ex; display: inline">
			    <a href="root.html">Home</a>
		    </div>
		</xsl:if>
		<div style="padding-left: 1ex; display: inline">
			<a href="index.html">Index</a>
		</div>
		<xsl:if test="global">
			<div style="padding-left: 1em; display: inline">
				<a href="#globals">Globals</a>
			</div>
		</xsl:if>
		<xsl:if test="$classes_test != ''">
			<div style="padding-left: 1em; display: inline">
				<a href="#classes">Classes</a>
			</div>
		</xsl:if>
		<xsl:if test="$structs_test != ''">
			<div style="padding-left: 1em; display: inline">
				<a href="#structs">Structs</a>
			</div>
		</xsl:if>
		<xsl:if test="$unions_test != ''">
			<div style="padding-left: 1em; display: inline">
				<a href="#unions">Unions</a>
			</div>
		</xsl:if>
		<xsl:if test="$enums_test != ''">
			<div style="padding-left: 1em; display: inline">
				<a href="#enums">Enums</a>
			</div>
		</xsl:if>

	    <!-- NEW -->
		<xsl:if test="type_member">
			<div style="padding-left: 1em; display: inline">
				<a href="#types">Types</a>
			</div>
		</xsl:if>
		<xsl:if test="data">
			<div style="padding-left: 1em; display: inline">
				<a href="#data">Data</a>
			</div>
		</xsl:if>
		<xsl:if test="arg">
			<div style="padding-left: 1em; display: inline">
				<a href="#myconf">MyConf</a>
			</div>
		</xsl:if>
		<xsl:if test="method">
			<div style="padding-left: 1em; display: inline">
				<a href="#methods">Methods</a>
			</div>
		</xsl:if>
	    <!-- (NEW) -->
	</div>

	<div class="content_div">
		<xsl:call-template name="category_contents"/>
	</div>

    <!-- NEW -->
	<xsl:variable name="has_class_tables">
		<xsl:call-template name="class_description_test"/>
	</xsl:variable>

	<xsl:if test="$has_class_tables">
		<br/>
	</xsl:if>

	<xsl:call-template name="class_description"/>
    <!-- (NEW) -->
</xsl:template>

<xsl:template name="category_contents">
	<xsl:variable name="classes_test">
		<xsl:call-template name="class_list"/>
	</xsl:variable>
	<xsl:variable name="structs_test">
		<xsl:call-template name="struct_list"/>
	</xsl:variable>
	<xsl:variable name="unions_test">
		<xsl:call-template name="union_list"/>
	</xsl:variable>
	<xsl:variable name="enums_test">
		<xsl:call-template name="enum_list"/>
	</xsl:variable>

	<xsl:call-template name="category_description"/>

	<xsl:if test="global">
		<div class="methods_header">
			<a name="globals"/>
			<span class="methods_header_title">Globals</span>
		</div>
		<table class="methods_table" width="100%" cellpadding="0" cellspacing="0">
			<xsl:for-each select="global [position () = 1]">
				<xsl:call-template name="global_brief">
					<xsl:with-param name="first">1</xsl:with-param>
				</xsl:call-template>
			</xsl:for-each>
			<xsl:for-each select="global [position () > 1]">
				<xsl:call-template name="global_brief">
					<xsl:with-param name="first">0</xsl:with-param>
				</xsl:call-template>
			</xsl:for-each>
		</table>
		<br/>
	</xsl:if>

<!-- Deprecated (moved to "class_description")
	<table class="classes_table" width="100%" cellpadding="0" cellspacing="0">
		<xsl:if test="$classes_test != ''">
			<tr>
				<td colspan="2">
					<a name="classes"/>
					<div class="classes_header">Classes</div>
				</td>
			</tr>
			<xsl:call-template name="class_list">
				<xsl:with-param name="first_namespace">1</xsl:with-param>
			</xsl:call-template>
			<xsl:if test="$structs_test != '' or $unions_test != '' or $enums_test != ''">
				<tr><td colspan="2" class="classes_spacer"><br/></td></tr>
			</xsl:if>
		</xsl:if>

		<xsl:if test="$structs_test != ''">
			<tr>
				<td colspan="2">
					<a name="structs"/>
					<div class="classes_header">Structs</div>
				</td>
			</tr>
			<xsl:call-template name="struct_list">
				<xsl:with-param name="first_namespace">1</xsl:with-param>
			</xsl:call-template>
			<xsl:if test="$unions_test != '' or $enums_test != ''">
				<tr><td colspan="2" class="classes_spacer"><br/></td></tr>
			</xsl:if>
		</xsl:if>

		<xsl:if test="$unions_test != ''">
			<tr>
				<td colspan="2">
					<a name="unions"/>
					<div class="classes_header">Unions</div>
				</td>
			</tr>
			<xsl:call-template name="union_list">
				<xsl:with-param name="first_namespace">1</xsl:with-param>
			</xsl:call-template>
			<xsl:if test="$enums_test != ''">
				<tr><td colspan="2" class="classes_spacer"><br/></td></tr>
			</xsl:if>
		</xsl:if>

		<xsl:if test="$enums_test != ''">
			<tr>
				<td colspan="2">
					<a name="enums"/>
					<div class="classes_header">Enums</div>
				</td>
			</tr>
			<xsl:call-template name="enum_list">
				<xsl:with-param name="first_namespace">1</xsl:with-param>
			</xsl:call-template>
		</xsl:if>
	</table>
-->
</xsl:template>

<xsl:template match="erdoc">
<!--
	<xsl:for-each name="root">
		<xsl:apply-templates select="root"/>
	</xsl:for-each>
-->
	<xsl:apply-templates select="root"/>
	<xsl:apply-templates select="category"/>

	<html>
	<head>
		<title>
			<xsl:if test="/erdoc/root/title">
				<xsl:value-of select="/erdoc/root/title"/>
				<xsl:text> - </xsl:text>
			</xsl:if>
			<xsl:text>Index</xsl:text>
		</title>
		<link rel="stylesheet" type="text/css" href="erdoc.css"/>
	</head>
	<body>
	<div class="header">Index</div>

	<xsl:call-template name="category_frame"/>

	<xsl:apply-templates select="namespace | class | union | enum | struct"/>
	<xsl:copy-of select="$erdoc_footer"/>
	</body>
	</html>
</xsl:template>

<xsl:template match="namespace">
	<xsl:apply-templates select="class | union | enum | struct | namespace"/>
</xsl:template>

<xsl:template match="class">
	<xsl:call-template name="generic_class">
		<xsl:with-param name="type">class</xsl:with-param>
	</xsl:call-template>
</xsl:template>

<xsl:template match="union">
	<xsl:call-template name="generic_class">
		<xsl:with-param name="type">union</xsl:with-param>
	</xsl:call-template>
</xsl:template>

<xsl:template match="enum">
	<xsl:call-template name="generic_class">
		<xsl:with-param name="type">enum</xsl:with-param>
	</xsl:call-template>
</xsl:template>

<xsl:template match="struct">
	<xsl:call-template name="generic_class">
		<xsl:with-param name="type">struct</xsl:with-param>
	</xsl:call-template>
</xsl:template>

<xsl:template match="parent">
<div style="margin-left: {(@depth + 1) * 3}em"><tt><b><xsl:apply-templates mode="decl"/></b></tt></div>
</xsl:template>

<xsl:template name="category_page">
	<exslt:document href="{filename}"
			method="xml"
			version="1.0"
			encoding="UTF-8"
			doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN"
			doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
		<html>
		<head>
			<title>
				<xsl:choose>
					<xsl:when test="/erdoc/root/title">
						<xsl:value-of select="/erdoc/root/title"/>
						<xsl:if test="local-name() != 'root'">
							<xsl:text> - </xsl:text>
							<xsl:value-of select="title"/>
						</xsl:if>
					</xsl:when>
					<xsl:otherwise>
						<xsl:choose>
							<xsl:when test="local-name() != 'root'">
								<xsl:value-of select="title"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:text>Reference manual</xsl:text>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</title>
			<link rel="stylesheet" type="text/css" href="erdoc.css"/>
		</head>
		<body>
		<div class="header"><xsl:value-of select="title"/></div>

		<xsl:call-template name="category_frame"/>

		<xsl:copy-of select="$erdoc_footer"/>
		</body>
		</html>
	</exslt:document>
</xsl:template>

<xsl:template match="root">
	<xsl:call-template name="category_page"/>
</xsl:template>

<xsl:template match="category">
	<xsl:call-template name="category_page"/>
</xsl:template>

<xsl:template name="class_description_test">
	<xsl:if test=".//class or .//struct or .//union or .//enum or type_member or method or arg or data">1</xsl:if>
</xsl:template>

<xsl:template name="class_description">
	<!-- TODO classes_test analogous to template "category-contents" -->
	<!-- TODO The whole class/struct/union separation is very unnatural.
		  There should be only class/enum separation. -->

	<!-- TODO 'depth' should be calculated in .xsl -->
	<xsl:if test=".//class or .//struct or .//union or .//enum">
		<div class="content_div">
			<table class="classes_table" width="100%" cellpadding="0" cellspacing="0">
				<xsl:if test=".//class">
					<tr>
						<td colspan="2">
							<a name="classes"/>
							<div class="classes_header">Classes</div>
							<!-- TODO: Add support for 'classes' special header to erdoc.pl. -->
						</td>
					</tr>
					<xsl:call-template name="class_list">
						<xsl:with-param name="first_namespace">1</xsl:with-param>
					</xsl:call-template>
					<xsl:if test=".//struct or .//union or .//enum">
						<tr><td colspan="2" class="classes_spacer"><br/></td></tr>
					</xsl:if>
				</xsl:if>

				<xsl:if test=".//struct">
					<tr>
						<td colspan="2">
							<a name="structs"/>
							<div class="classes_header">Structs</div>
							<!-- TODO: Add support for 'structs' special header to erdoc.pl. -->
						</td>
					</tr>
					<xsl:call-template name="struct_list">
						<xsl:with-param name="first_namespace">1</xsl:with-param>
					</xsl:call-template>
					<xsl:if test=".//union or .//enum">
						<tr><td colspan="2" class="classes_spacer"><br/></td></tr>
					</xsl:if>
				</xsl:if>

				<xsl:if test=".//union">
					<tr>
						<td colspan="2">
							<a name="unions"/>
							<div class="classes_header">Unions</div>
							<!-- TODO: Add support for 'unions' special header to erdoc.pl. -->
						</td>
					</tr>
					<xsl:call-template name="union_list">
						<xsl:with-param name="first_namespace">1</xsl:with-param>
					</xsl:call-template>
					<xsl:if test=".//enum">
						<tr><td colspan="2" class="classes_spacer"><br/></td></tr>
					</xsl:if>
				</xsl:if>

				<xsl:if test=".//enum">
					<tr>
						<td colspan="2">
							<a name="enums"/>
							<div class="classes_header">Enums</div>
							<!-- TODO: Add support for 'classes' special header to erdoc.pl. -->
						</td>
					</tr>
					<xsl:call-template name="enum_list">
						<xsl:with-param name="first_namespace">1</xsl:with-param>
					</xsl:call-template>
				</xsl:if>
			</table>

			<xsl:if test="type_member or method or arg or data">
				<br/>
			</xsl:if>
		</div>
	</xsl:if>

	<xsl:if test="type_member">
		<div class="methods_div">
		<a name="types"/>
		<div class="methods_header">
			<span class="methods_header_title">Types</span>
			<xsl:if test="types">
				<br/>
				<xsl:apply-templates select="types"/>
			</xsl:if>
		</div>
		<table class="methods_table" width="100%" cellpadding="0" cellspacing="0">
			<xsl:for-each select="type_member [position () = 1]">
				<xsl:call-template name="method_brief">
					<xsl:with-param name="first">1</xsl:with-param>
					<xsl:with-param name="symbol_link">0</xsl:with-param>
					<xsl:with-param name="show_args">1</xsl:with-param>
					<xsl:with-param name="anchor">1</xsl:with-param>
				</xsl:call-template>
			</xsl:for-each>
			<xsl:for-each select="type_member [position () > 1]">
				<xsl:call-template name="method_brief">
					<xsl:with-param name="first">0</xsl:with-param>
					<xsl:with-param name="symbol_link">0</xsl:with-param>
					<xsl:with-param name="show_args">1</xsl:with-param>
					<xsl:with-param name="anchor">1</xsl:with-param>
				</xsl:call-template>
			</xsl:for-each>
		</table>
		</div>
		<xsl:if test="method or arg or data">
			<br/>
		</xsl:if>
	</xsl:if>

	<xsl:if test="data">
		<div class="methods_div">
		<a name="data"/>
		<div class="methods_header">
			<span class="methods_header_title">Data fields</span>
			<xsl:if test="data_fields">
				<br/>
				<xsl:apply-templates select="data_fields"/>
			</xsl:if>
		</div>
		<table class="methods_table" width="100%" cellpadding="0" cellspacing="0">
			<xsl:for-each select="data [position () = 1]">
				<xsl:call-template name="data_brief">
					<xsl:with-param name="first">1</xsl:with-param>
				</xsl:call-template>
			</xsl:for-each>
			<xsl:for-each select="data [position () > 1]">
				<xsl:call-template name="data_brief">
					<xsl:with-param name="first">0</xsl:with-param>
				</xsl:call-template>
			</xsl:for-each>
		</table>
		</div>
		<xsl:if test="method or arg">
			<br/>
		</xsl:if>
	</xsl:if>

	<xsl:if test="arg">
		<div class="methods_div">
		<a name="myconf"/>
		<div class="methods_header">
			<span class="methods_header_title">MyConf parameters</span>
		</div>
		<table class="methods_table" width="100%" cellpadding="0" cellspacing="0">
			<xsl:for-each select="arg [position () = 1]">
				<xsl:call-template name="data_brief">
					<xsl:with-param name="first">1</xsl:with-param>
				</xsl:call-template>
			</xsl:for-each>
			<xsl:for-each select="arg [position () > 1]">
				<xsl:call-template name="data_brief">
					<xsl:with-param name="first">0</xsl:with-param>
				</xsl:call-template>
			</xsl:for-each>
		</table>
		</div>
		<xsl:if test="method">
			<br/>
		</xsl:if>
	</xsl:if>

	<xsl:if test="method">
		<div class="methods_div">
		<a name="methods"/>
		<div class="methods_header">
			<span class="methods_header_title">Methods</span>
			<xsl:if test="methods">
				<br/>
				<xsl:apply-templates select="methods"/>
			</xsl:if>
		</div>
		<table class="methods_table" width="100%" cellpadding="0" cellspacing="0">
			<xsl:for-each select="method [position () = 1]">
				<xsl:call-template name="method_brief">
					<xsl:with-param name="first">1</xsl:with-param>
				</xsl:call-template>
			</xsl:for-each>
			<xsl:for-each select="method [position () > 1]">
				<xsl:call-template name="method_brief">
					<xsl:with-param name="first">0</xsl:with-param>
				</xsl:call-template>
			</xsl:for-each>
		</table>
		</div>
	</xsl:if>

	<xsl:apply-templates select="method"/>
</xsl:template>

<xsl:template name="generic_class">
	<xsl:param name="type">class</xsl:param>
	<xsl:variable name="class_name">
		<xsl:choose>
			<xsl:when test="primary">
				<xsl:value-of select="primary"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="name"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>

	<xsl:apply-templates select="class | union | enum | struct"/>

	<exslt:document href="{filename}"
			method="xml"
			version="1.0"
			encoding="UTF-8"
			doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN"
			doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
		<html>
		<head>
			<title>
				<xsl:if test="/erdoc/root/title">
					<xsl:value-of select="/erdoc/root/title"/>
					<xsl:text> - </xsl:text>
				</xsl:if>
				<xsl:value-of select="$type"/>
				<xsl:text> </xsl:text>
				<xsl:value-of select="$class_name"/>
			</title>
			<link rel="stylesheet" type="text/css" href="erdoc.css"/>
		</head>
		<body>
<!--		<a name="class_{name}"/> -->
		<div class="header">
			<xsl:value-of select="$type"/>
			<xsl:text> </xsl:text>
			<xsl:value-of select="$class_name"/>
			<xsl:if test="template">
				(template)
			</xsl:if>
		</div>
		<div class="linkbar">
			<xsl:if test="/erdoc/root">
			    <div style="padding-left: 1ex; display: inline">
				    <a href="root.html">Home</a>
			    </div>
			</xsl:if>
			<div style="padding-left: 1ex; display: inline">
				<a href="index.html">Index</a>
			</div>
			<xsl:if test="type_member">
				<div style="padding-left: 1em; display: inline">
					<a href="#types">Types</a>
				</div>
			</xsl:if>
			<xsl:if test="data">
				<div style="padding-left: 1em; display: inline">
					<a href="#data">Data</a>
				</div>
			</xsl:if>
			<xsl:if test="arg">
				<div style="padding-left: 1em; display: inline">
					<a href="#myconf">MyConf</a>
				</div>
			</xsl:if>
			<xsl:if test="method">
				<div style="padding-left: 1em; display: inline">
					<a href="#methods">Methods</a>
				</div>
			</xsl:if>
		</div>

<!--		<xsl:if test="parents"> -->
			<div class="parents">
				<div class="content_div">
					<xsl:apply-templates select="parents/parent"/>
					<div><tt><b><xsl:value-of select="full_name"/></b></tt></div>
				</div>
			</div>
<!--			<br/> -->
<!--		</xsl:if> -->

		<xsl:if test="derivatives">
			<div class="derivatives">
				<div class="content_div">
					<xsl:text>Derivatives: </xsl:text>
					<tt>
					<xsl:apply-templates select="derivatives/derivative [position () = 1]" mode="decl"/>
					<xsl:for-each select="derivatives/derivative [position () > 1]">
						<xsl:text>, </xsl:text>
						<xsl:apply-templates mode="decl"/>
					</xsl:for-each>
					</tt>
				</div>
			</div>
		</xsl:if>

		<xsl:if test="decl">
			<div class="class_decl">
				<pre>
					<xsl:apply-templates select="decl [position () = 1]"/>
				</pre>
			</div>
		</xsl:if>

		<div class="content_div">
			<xsl:call-template name="category_description"/>
		</div>

		<xsl:call-template name="class_description"/>

		<xsl:copy-of select="$erdoc_footer"/>
		</body>
		</html>
	</exslt:document>
</xsl:template>

<xsl:template name="data_brief">
	<xsl:param name="first">0</xsl:param>

	<xsl:variable name="class">
	    <xsl:if test="$first != 1">data_brief_more</xsl:if>
	</xsl:variable>

	<tr>
		<td class="method_name {$class}" style="width: 1px">
			<span class="method_rettype rettype">
				<tt><xsl:apply-templates select="data_type" mode="decl"/></tt>
			</span>
		</td>
		<td class="data_brief_name {$class}">
			<tt><xsl:value-of select="name"/></tt>
		</td>
		<td class="data_brief_desc {$class}">
			<xsl:apply-templates select="abstract"/>
			<xsl:apply-templates select="desc"/>
		</td>
	</tr>
</xsl:template>

<xsl:template name="method_brief">
	<xsl:param name="first">0</xsl:param>
	<xsl:param name="symbol_link">1</xsl:param>
	<xsl:param name="show_args">0</xsl:param>
	<xsl:param name="anchor">0</xsl:param>

	<xsl:variable name="class">
<!-- TODO Unused? -->
		<xsl:if test="$first != 1">method_brief_more</xsl:if>
	</xsl:variable>

	<tr>
		<xsl:if test="$symbol_link = 1">
			<td class="method_name {$class} right_align" style="width: 1px">
				<span class="method_rettype">
					<tt><xsl:apply-templates select="rettype" mode="decl"/></tt>
				</span>
			</td>
		</xsl:if>
		<td class="method_desc {$class}">
			<xsl:if test="$anchor = 1">
				<a name="{anchor}"/>
			</xsl:if>
			<xsl:choose>
				<xsl:when test="$symbol_link = 0">
					<!-- FIXME The padding is not very nice here. -->
					<div style="padding-left: 1ex">
						<tt><xsl:apply-templates select="decl"/></tt>
					</div>
				</xsl:when>
				<xsl:otherwise>
					<table cellpadding="0" cellspacing="0">
					<tr>
						<td style="vertical-align: top; white-space: nowrap;">
							<span class="method_symbol">
								<tt>
									<a href="#method_{name}">
										<xsl:value-of select="name"/>
									</a>
								</tt>
							</span>
						</td>
						<td class="method_arglist" style="vertical-align: top;">
							<tt>&nbsp;<xsl:value-of select="arglist_prefix"/></tt>
						</td>
						<td>
							<tt>
							<span class="method_arglist">
								<xsl:apply-templates select="arglist" mode="decl"/>
							</span>
							</tt>
						</td>
					</tr>
					</table>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:if test="abstract">
				<div style="margin-top: 1ex; margin-left: 4em">
					<xsl:apply-templates select="abstract"/>
				</div>
			</xsl:if>
			<xsl:if test="arg and $show_args = 1">
				<div style="margin-top: 1ex; margin-left: 8em">
					<table cellpadding="0" cellspacing="0">
						<xsl:call-template name="arg_table_body"/>
					</table>
				</div>
			</xsl:if>
		</td>
	</tr>
</xsl:template>

<xsl:template match="method">
	<div class="method_title">
		<a name="method_{name}"/>
		<xsl:value-of select="name"/>
	</div>
	<div class="method_div">
		<p><xsl:apply-templates select="abstract" mode="erl"/></p>
		<xsl:apply-templates select="desc" mode="erl"/>
		<div class="method_decl">
			<pre>
				<xsl:apply-templates select="decl"/>
			</pre>
		</div>
		<div class="arg">
			<!-- TODO Insert a vertical spacer otherwise (somehow) -->
			<xsl:if test="arg">
				<table cellpadding="0" cellspacing="0">
					<xsl:call-template name="arg_table_body"/>
				</table>
			</xsl:if>
		</div>
<!--
		<xsl:for-each select="type">
			<b><a href="{@ref}"><xsl:value-of select="@name"/></a></b><br/>
		</xsl:for-each>
-->
	</div>
</xsl:template>

<xsl:template name="arg_table_body">
	<xsl:for-each select="arg">
		<tr>
			<td>
				<span class="arg_name">
					<tt><xsl:value-of select="name"/></tt>
				</span>&nbsp;:&nbsp;
			</td>
			<td>
				<div style="margin-left: 1ex">
					<span class="arg_desc">
						<xsl:apply-templates select="desc" mode="erl"/>
					</span>
				</div>
			</td>
		</tr>
	</xsl:for-each>
</xsl:template>

<!-- ********* Declaration tags ********* -->

<xsl:template match="decl">
	<xsl:apply-templates mode="decl"/>
</xsl:template>

<xsl:template match="type" mode="decl">
	<a href="{@ref}">
		<xsl:value-of select="@name"/>
	</a>
</xsl:template>

<xsl:template match="arglist" mode="decl">
	<span class="arglist">
		<xsl:apply-templates mode="decl"/>
	</span>
</xsl:template>

<xsl:template match="rettype" mode="decl">
	<span class="rettype">
		<xsl:apply-templates mode="decl"/>
	</span>
</xsl:template>

<xsl:template match="type_decl" mode="decl">
<!-- Aborts <pre> tag (which is equivalent to white-space: pre) -->
<!--	<span style="white-space: nowrap"> -->
		<xsl:apply-templates mode="decl"/>
<!--	</span> -->
</xsl:template>

<xsl:template match="basic" mode="decl">
	<span class="decl_basic">
		<xsl:apply-templates mode="decl"/>
	</span>
</xsl:template>

<xsl:template match="keyword" mode="decl">
	<span class="decl_keyword">
		<xsl:apply-templates mode="decl"/>
	</span>
</xsl:template>

<xsl:template match="symbol" mode="decl">
	<span class="decl_symbol">
		<xsl:apply-templates mode="decl"/>
	</span>
</xsl:template>


<!-- ************* erL tags ************ -->

<xsl:template match="erl">
	<xsl:apply-templates mode="erl"/>
</xsl:template>

<xsl:template name="erl_cat">
	<xsl:if test="@name">
		<xsl:variable name="name" select="@name"/>
		<xsl:for-each select="/erdoc/category[name=$name]">
				<dt>
					<a href="{name}.html">
						<xsl:value-of select="title"/>
					</a>
					<xsl:if test="abstract">
						<xsl:text> - </xsl:text><xsl:apply-templates select="abstract"/>
					</xsl:if>
				</dt>
				<xsl:for-each select="desc//cat">
					<dd>
						<dl>
							<xsl:call-template name="erl_cat"/>
						</dl>
					</dd>
				</xsl:for-each>
		</xsl:for-each>
	</xsl:if>
</xsl:template>

<!--
<xsl:template match="cat" mode="erl">
	<xsl:call-template name="erl_cat"/>
</xsl:template>
-->

<xsl:template match="toc" mode="erl">
	<dl>
		<xsl:for-each select="../cat">
			<xsl:call-template name="erl_cat"/>
		</xsl:for-each>
	</dl>
</xsl:template>

<xsl:template match="text" mode="erl">
<!--	<xsl:apply-templates mode="erl"/> -->
	<xsl:value-of select="."/>
</xsl:template>

<xsl:template match="p" mode="erl">
	<p><xsl:apply-templates mode="erl"/></p>
</xsl:template>

<xsl:template match="ref" mode="erl">
	<b><i><xsl:apply-templates more="erl"/></i></b>
</xsl:template>

<xsl:template match="b" mode="erl">
	<b><xsl:apply-templates mode="erl"/></b>
</xsl:template>

<xsl:template match="i" mode="erl">
	<i><xsl:apply-templates mode="erl"/></i>
</xsl:template>

<!-- Type -->
<xsl:template match="t" mode="erl">
	<tt><xsl:apply-templates mode="erl"/></tt>
</xsl:template>

<!-- Monospace font -->
<xsl:template match="tt" mode="erl">
	<tt><xsl:apply-templates mode="erl"/></tt>
</xsl:template>

<!-- Inline code -->
<xsl:template match="c" mode="erl">
	<tt><xsl:apply-templates mode="erl"/></tt>
</xsl:template>

<!-- A paragraph of code -->
<xsl:template match="code" mode="erl">
	<div class="code">
		<pre><xsl:apply-templates mode="erl"/></pre>
	</div>
</xsl:template>

<xsl:template match="ul" mode="erl">
	<ul><xsl:apply-templates mode="erl"/></ul>
</xsl:template>

<xsl:template match="ol" mode="erl">
	<ol><xsl:apply-templates mode="erl"/></ol>
</xsl:template>

<xsl:template match="li" mode="erl">
	<li><xsl:apply-templates mode="erl"/></li>
</xsl:template>

<xsl:template match="table" mode="erl">
	<table class="erl_table" cellpadding="0" cellspacing="0"><xsl:apply-templates mode="erl"/></table>
</xsl:template>

<xsl:template match="tr" mode="erl">
	<xsl:choose>
		<xsl:when test="@head">
			<tr class="erl_table_head"><xsl:apply-templates mode="erl"/></tr>
		</xsl:when>
		<xsl:otherwise>
			<tr class="erl_table_row"><xsl:apply-templates mode="erl"/></tr>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template match="td" mode="erl">
	<td class="erl_table_cell"><xsl:apply-templates mode="erl"/></td>
</xsl:template>

<xsl:template match="img" mode="erl">
	<img src="{@src}" alt="{@alt}"/>
</xsl:template>

<xsl:template match="br" mode="erl">
	<br/>
</xsl:template>

<xsl:template match="center" mode="erl">
	<div style="text-align: center"><xsl:apply-templates mode="erl"/></div>
</xsl:template>

<xsl:template match="h1" mode="erl">
	<h1><xsl:apply-templates mode="erl"/></h1>
</xsl:template>

<xsl:template match="h2" mode="erl">
	<h2><xsl:apply-templates mode="erl"/></h2>
</xsl:template>

<xsl:template match="h3" mode="erl">
	<h3><xsl:apply-templates mode="erl"/></h3>
</xsl:template>

<xsl:template match="a" mode="erl">
	<xsl:choose>
		<xsl:when test="@ref">
			<a href="{@ref}.html"><xsl:apply-templates mode="erl"/></a>
		</xsl:when>
		<xsl:otherwise>
			<a href="{@href}"><xsl:apply-templates mode="erl"/></a>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>

</xsl:stylesheet>

